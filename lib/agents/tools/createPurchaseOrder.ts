export interface PurchaseOrderData {
  // UM6P specific fields
  subject?: string
  requestor?: string
  projectManager?: string
  purchaseType?: string
  designation?: string
  entity?: string
  budgetLine?: string
  familyReferent?: string
  
  // Standard fields
  vendor?: string
  description?: string
  amount?: string
  currency?: string
  department?: string
  costCenter?: string
  deliveryDate?: string
  priority?: string
  approver?: string
  notes?: string
}

export async function createPurchaseOrder(data: PurchaseOrderData) {
  // Always show the interactive form for SAP purchase order creation
  // Check if we have all required data for completion
  const isComplete = data.vendor && data.description && data.amount && data.department
  
  if (isComplete) {
    // Complete purchase order creation
    const mockPONumber = `PO-${Date.now()}`
    
    // Simulate SAP API delay
    await new Promise(resolve => setTimeout(resolve, 800))
    
    return {
      success: true,
      poNumber: mockPONumber,
      vendor: data.vendor,
      description: data.description,
      amount: data.amount,
      currency: data.currency || "USD",
      department: data.department,
      costCenter: data.costCenter,
      deliveryDate: data.deliveryDate,
      priority: data.priority || "normal",
      approver: data.approver,
      notes: data.notes,
      status: "Pending Approval",
      createdDate: new Date().toLocaleDateString(),
      totalAmount: data.amount,
      message: `üéâ Successfully created purchase order ${mockPONumber} in SAP`,
      confirmationCode: mockPONumber.toUpperCase(),
      ui: "sap-purchase-order",
      nextSteps: [
        "Purchase order has been submitted to SAP system",
        "Pending approval from designated approver",
        "Vendor will receive PO once approved",
        "Track status in SAP using PO number: " + mockPONumber
      ]
    }
  } else {
    // Return partial data to show UM6P interactive form
    return {
      success: false,
      partial: true,
      
      // UM6P required fields
      subject: data.subject || "",
      requestor: data.requestor || "",
      projectManager: data.projectManager || "",
      purchaseType: data.purchaseType || "",
      designation: data.designation || "",
      entity: data.entity || "",
      budgetLine: data.budgetLine || "",
      familyReferent: data.familyReferent || "",
      
      // Standard fields
      vendor: data.vendor || "",
      description: data.description || "",
      amount: data.amount || "",
      currency: data.currency || "MAD",
      deliveryDate: data.deliveryDate || "",
      approver: data.approver || "",
      notes: data.notes || "",
      
      message: "üìã Je vais vous guider √† travers le processus de Demande d'Achat UM6P. Utilisez le formulaire interactif ci-dessous pour saisir toutes les informations requises.",
      ui: "sap-purchase-order",
      showForm: true,
      
      guidanceSteps: [
        "1. Saisissez l'objet de votre demande (vous recevrez un N¬∞DA avec cet objet)",
        "2. Indiquez votre nom complet comme demandeur",
        "3. S√©lectionnez le type d'achat appropri√© selon le montant et la nature",
        "4. Remplissez la d√©signation du produit en fran√ßais",
        "5. Choisissez votre entit√© (ex: U129 pour Communication)",
        "6. Indiquez la ligne budg√©taire avec le type d'achat",
        "7. S√©lectionnez la famille r√©f√©rent selon la nature de la prestation"
      ],
      
      processInfo: {
        replaces: "Ce processus digitalis√© remplace les demandes par e-mail",
        validation: "Transmission automatique au r√©f√©rent m√©tier pour v√©rification",
        automation: "Le robot cr√©era automatiquement la DA apr√®s validation",
        tracking: "Vous recevrez un e-mail avec la r√©f√©rence DA",
        reminders: "Relances automatiques tous les 3 jours pour acc√©l√©rer l'approbation"
      }
    }
  }
}

// Helper function to validate UM6P purchase type requirements
export function validatePurchaseTypeRequirements(purchaseType: string, amount: string): {
  isValid: boolean
  messages: string[]
  requiredDocuments: string[]
} {
  const numAmount = parseFloat(amount) || 0
  const messages: string[] = []
  let requiredDocuments: string[] = []
  
  switch (purchaseType) {
    case 'direct':
      if (numAmount > 50000) {
        messages.push('‚ö†Ô∏è Montant > 50 KMAD: Appel d\'offres requis au lieu d\'achat direct')
      }
      requiredDocuments = [
        'Descriptif technique d√©taill√© (sans lien fournisseur ni prix)',
        'Proposition fournisseur'
      ]
      break
      
    case 'tender':
      if (numAmount <= 50000) {
        messages.push('‚ÑπÔ∏è Montant ‚â§ 50 KMAD: Achat direct possible')
      }
      requiredDocuments = [
        'Descriptif technique d√©taill√©',
        'Synth√®se des crit√®res de s√©lection',
        'Propositions fournisseurs'
      ]
      break
      
    case 'direct_contract':
      requiredDocuments = [
        'Devis',
        'Note gr√© √† gr√© sign√©e par le responsable d\'entit√©',
        'Lettre d\'exclusivit√© (si applicable)'
      ]
      break
      
    case 'online':
      requiredDocuments = [
        'Lien d\'achat',
        'Capture d\'√©cran de l\'achat'
      ]
      break
      
    case 'contract':
      requiredDocuments = [
        'Contrat',
        'Factures √† payer'
      ]
      break
      
    case 'vacation':
      requiredDocuments = [
        'Contrat de vacataire'
      ]
      break
  }
  
  return {
    isValid: messages.length === 0 || !messages.some(m => m.includes('‚ö†Ô∏è')),
    messages,
    requiredDocuments
  }
}